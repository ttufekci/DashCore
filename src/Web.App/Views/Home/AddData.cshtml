@model Web.App.Models.TableDataVM
@using Web.App.Models

<div class="tablelist">
    @Html.Partial("TablesMenu", new TablesMenuVM { TableGroups = Model.TableGroups, ConnectionName = Model.ConnectionName })
</div>
<div class="content">
    <div><p>Table: @Model.TableName</p></div>
    <button id="backToList">Back To List</button>
    <br />
    <form asp-action="AddDataPost" asp-controller="Home" method="post">
        <table id="tabledata">
            <tbody>
                @for (var i = 0; i < Model.ColumnList.Count(); i++)
                {
                    var item = Model.ColumnList[i];
                    <tr>
                        <td>@item.Name @(item.IsPrimaryKey ? "(Primary Key)" : "") <span style="font-style: italic; color: powderblue;">@((item.DataType.Equals("NUMBER") || item.DataType.Equals("LONG")) ? "(Number)" : "")</span></td>
                        <td>
                            <div style="display: flex; flex-flow: column;">    
                                <div style="display: flex;">                                    
                                    @if (item.IsForeignKey)
                                    {
                                        <input id="@item.Name" type="text" name="DataFields" @(item.IsPrimaryKey ? "readonly" : "")
                                               onblur="findDescription('@item.Name','@item.ForeignTable','@item.ForeignTableKeyColumn')"/>
                                        <button onclick='lookupSearch("@item.Name", "@item.ForeignTable","@item.ForeignTableKeyColumn"); return false;'>...</button>
                                    }
                                    else
                                    {
                                        if (item.DataType.Equals("NUMBER") || item.DataType.Equals("LONG"))
                                        {
                                            <input id="@item.Name" type="number" placeholder="Number Input" name="DataFields" @(item.IsPrimaryKey ? "readonly" : "")/>
                                        }
                                        else
                                        {
                                            <input id="@item.Name" type="text" name="DataFields" @(item.IsPrimaryKey ? "readonly" : "")/>
                                        }
                                    }
                                </div>
                                @if (item.IsForeignKey)
                                {                                    
                                <textarea id="@item.Name-Desc" disabled></textarea>
                                }
                            </div>
                        </td>
                        <td>
                            @if (item.IsPrimaryKey && !string.IsNullOrEmpty(Model.SequenceName) && Model.SequenceName != "undefined")
                            {
                                <input type="checkbox" checked /> <text>Use Sequence</text>
                                <span>--> @Model.SequenceName</span>
                            }
                        </td>
                    </tr>
                }
                <tr><td><button>Save</button></td><td></td><td></td></tr>
            </tbody>
        </table>
        @Html.HiddenFor(x => x.ConnectionName)
        @Html.HiddenFor(x => x.TableName)
        <div class="pageFooter">
            <br />
        </div>
    </form>
</div>

@section Scripts
    {
<script type="text/javascript">
    function goList() {
        console.log('go to list');
        window.location = '@Url.Action("TableData","Home")' + "?tableName=@Model.TableName&connectionName=@Model.ConnectionName";
    }

    function getSearchFields() {
        var searchFields = [];

        var colFieldsLength = '@Model.SearchValues.Count';

        @foreach(var key in Model.SearchValues.Keys)
        {
            var searchValue = Model.SearchValues[key];
            if (string.IsNullOrEmpty(searchValue))
            {
                continue;
            };
            <text>
            var searchField = { name: '@key', value: '@searchValue' }
            searchFields.push(searchField);
            </text>
        }

        return JSON.stringify(searchFields);
    }

    function goListFromAdd() {
        console.log('go to list');
        var searchFieldsJson = getSearchFields();
        window.location = '@Url.Action("TableDataSearch","Home")' +
            '?tableName=@Model.TableName&connectionName=@Model.ConnectionName&page=@Context.Request.Query["page"]&sortColumn=@Model.SortColumn' +
            '&sortDir=@Model.SortDir&searchFields=' + searchFieldsJson;
    }

    var btnElementList = document.getElementById('backToList');
    btnElementList.addEventListener('click', goListFromAdd);

    function findDescription(itemId, foreignTable, foreignTableKey) {
        var idElement = document.getElementById(itemId);

        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                console.log('statusok:', xhttp.responseText);
                var y = JSON.parse(xhttp.responseText);
                if (y.success && y.message) {
                    document.getElementById(itemId + '-Desc').innerHTML = y.message;
                } else {
                    document.getElementById(itemId + '-Desc').innerHTML = 'Not Found';
                    idElement.value = '';
                }
            }
        };

        xhttp.open("GET", '@Url.Action("FindForeignDescription", "Edit")' + '?connectionName=@Model.ConnectionName&foreignTable=' + foreignTable
            + '&foreignTableKey=' + foreignTableKey + '&foreignKeyValue=' + idElement.value, true);
        xhttp.send();
    }
</script>
}

